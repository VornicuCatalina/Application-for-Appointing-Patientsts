CREATE OR REPLACE PROCEDURE showPatient (id_user int , namePatient out varchar ,
										id_doc out int, nameDoctor out varchar,
										dateAppointment out date, visited out boolean) 
language plpgsql
AS
$$
DECLARE
BEGIN
	select fullName,checked into namePatient,visited from patients where id_patient = id_user;
	select id_doctor, fullName , date_assignation into id_doc,nameDoctor,dateAppointment from
			assignations natural join doctors where id_patient = id_user;
END;
$$;


------------------------------------------------------------------------------------------------------
check if the user exists, then check if it is a patient or a doctor:
    - if it is a patient, return 0
    - if it is a doctor, return 1
    - if it is not a patient or a doctor, return -1


CREATE OR REPLACE PROCEDURE checkExistence (id_user int, person_type out int)
language plpgsql
AS
$$
DECLARE
existence_patient integer;
existence_doctor integer;
BEGIN
	select count(*) into existence_patient from patients where id_patient = id_user;
	select count(*) into existence_doctor from doctors where id_doctor = id_user;
	if (existence_patient = 0 and existence_doctor = 0) then
		person_type = -1;
		return;
	elsif (existence_doctor > 0) then
		person_type = 1;
		return;
	else
		person_type = 0;
		return;
	end if;
END;
$$;
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE showDoctor (id_user int,longDescription out VARCHAR)
language plpgsql
AS
$$
DECLARE
BEGIN
select array_to_string(ARRAY(SELECT id_patient||'_'|| fullName ||'_'|| date_assignation
FROM assignations
natural join patients
where id_doctor = id_user ORDER BY date_assignation), ',') into longDescription;
END;
$$;
------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION DELETEOLDERDATES () RETURNS integer LANGUAGE PLPGSQL AS $$
DECLARE
oldDates timestamp := current_timestamp - interval '7 days';
numberDates integer;
dates integer[] ='{}';
idPatients integer[] ='{}';
aSingleId record;
counter integer :=0;
idPatientsCursor CURSOR(p_date timestamp) FOR
select id_patient,id_doctor from assignations where date_assignation<p_date;
BEGIN
	select count(*) into numberDates from assignations where date_assignation<oldDates;
	if numberDates = 0 then
		return 0;
	else
	open idPatientsCursor(oldDates);

--for cursor, finding ids
	loop
	fetch idPatientsCursor into aSingleId;
	exit when not found;
	dates[counter] := aSingleId.id_patient;
	counter:=counter+1;
	end loop;
	close idPatientsCursor;

--now deleting the records in both tables
	delete from assignations where date_assignation<oldDates;
	for i in 0..counter loop
	delete from patients where id_patient = dates[i];
	end loop;
	return numberDates;
	end if;
END;
$$;
---------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE percentage(
    IN assignments_number numeric,
    IN timetable_number numeric,
    OUT result numeric
)
LANGUAGE plpgsql
AS $$
BEGIN
    result := (assignments_number / timetable_number) * 100;
END;
$$;
---------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE get_doctor_statistics(
    input_date DATE,
    doctor_id integer,
    OUT result numeric
)
LANGUAGE plpgsql
AS
$$
DECLARE
    monday_date DATE;
    sunday_date DATE;
    timetable_dates numeric;
    assignment_dates numeric;
BEGIN
    WITH week_boundaries AS (
        SELECT
            input_date - (EXTRACT(DOW FROM input_date)::INTEGER) + 1 AS monday,
            input_date + (7 - EXTRACT(DOW FROM input_date)::INTEGER) AS sunday
    )
    SELECT monday, sunday INTO monday_date, sunday_date FROM week_boundaries;

    SELECT array_length(timetable, 1) INTO timetable_dates FROM timetable WHERE id = doctor_id;

    SELECT count(*) INTO assignment_dates FROM assignations WHERE id_doctor = doctor_id and date_assignation > monday_date and date_assignation < sunday_date;

    -- Call the percentage function and capture the result in a local variable
    DECLARE
        percentage_result numeric;
    BEGIN
        CALL percentage(assignment_dates, timetable_dates, percentage_result);
        result := percentage_result;
    END;

    RAISE NOTICE 'Percentage: %', result;
END;
$$;
----------------------------------------------------------------------------------------